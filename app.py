from flask import Flask, request, jsonify, session, send_from_directory, render_template
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import base64
import os
import random
import string
import json
import requests
# import secrets # Kh√¥ng c√≤n c·∫ßn thi·∫øt n·∫øu kh√¥ng t·∫°o API key
import psycopg2
import urllib.parse
from psycopg2.extras import RealDictCursor
from functools import wraps
import re

PACKAGE_PATTERN = re.compile(r'subs:com\\.google\\.android\\.apps\\.subscriptions\\.red:g1\\.(.*?)\\\"')
CODE_PATTERN = re.compile(r'\\[(?:null,){5}\\[\\\"(.*?)\\\"\\]\\]')
app = Flask(__name__, template_folder='templates')
app.secret_key = 'your_secret_key_here' # H√£y thay ƒë·ªïi secret key n√†y trong m√¥i tr∆∞·ªùng production
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

DATABASE_URL = os.getenv("DATABASE_URL")
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")


def get_db():
    return psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)

def send_telegram_alert(message):
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        try:
            requests.post(url, data={
                "chat_id": TELEGRAM_CHAT_ID,
                "text": f"üö® ALERT from TempMail:\n{message}"
            }, timeout=5)
        except Exception as ex:
            print("‚ö† Kh√¥ng g·ª≠i ƒë∆∞·ª£c Telegram:", ex)

# ƒê√£ lo·∫°i b·ªè h√†m require_api_key v√† decorator @require_api_key

def gmail_authenticate():
    try:
        credentials_data = os.environ.get('GOOGLE_CREDENTIALS')
        refresh_token = os.environ.get('GOOGLE_TOKEN')

        if not credentials_data or not refresh_token:
            msg = "‚ùå Thi·∫øu GOOGLE_CREDENTIALS ho·∫∑c GOOGLE_TOKEN"
            print(msg)
            send_telegram_alert(msg)
            return None

        creds_dict = json.loads(credentials_data)
        creds_dict['refresh_token'] = refresh_token

        creds = Credentials(
            token=None,
            refresh_token=creds_dict['refresh_token'],
            token_uri=creds_dict['token_uri'],
            client_id=creds_dict['client_id'],
            client_secret=creds_dict['client_secret'],
            scopes=SCOPES
        )

        creds.refresh(Request())
        service = build('gmail', 'v1', credentials=creds)
        service.users().labels().list(userId='me').execute()

        print("‚úÖ Gmail API ho·∫°t ƒë·ªông v·ªõi access_token m·ªõi")
        return service

    except Exception as e:
        msg = f"‚ùå Gmail API l·ªói: {e}"
        print(msg)
        send_telegram_alert(msg)
        return None

@app.route('/<path:email>')
def serve_email_with_param(email):
    if '@' not in email:
        # M·∫∑c ƒë·ªãnh t√™n mi·ªÅn n·∫øu ng∆∞·ªùi d√πng ch·ªâ nh·∫≠p username
        # Email m·∫∑c ƒë·ªãnh s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi frontend JavaScript ƒë·ªÉ ƒëi·ªÅn v√†o √¥ input
        pass # ƒê·ªÉ frontend x·ª≠ l√Ω vi·ªác ƒëi·ªÅn email v√†o input
    return render_template('index.html')


@app.route('/create_email', methods=['POST'])
def create_email():
    new_username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
    # session['email'] = new_username + "@quy.edu.pl" # Kh√¥ng n√™n l∆∞u email trong session n·∫øu kh√¥ng c·∫ßn thi·∫øt
    # Tr·∫£ v·ªÅ email ƒë·ªÉ client t·ª± qu·∫£n l√Ω
    return jsonify({"email": new_username + "@quy.edu.pl"})

@app.route('/list_emails', methods=['GET'])
def list_emails():
    service = gmail_authenticate()
    if not service:
        return jsonify({"error": "Gmail API kh√¥ng s·∫µn s√†ng (token l·ªói ho·∫∑c ch∆∞a kh·ªüi t·∫°o)"}), 503

    target_email = request.args.get('email', "").lower()
    if not target_email or '@' not in target_email:
        return jsonify({"error": "ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu."}), 400
        
    mails = []

    def fetch_by_label(label):
        query = f"to:{target_email}"
        result = service.users().messages().list(
            userId='me',
            q=query,
            labelIds=[label],
            maxResults=10 # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng email l·∫•y v·ªÅ
        ).execute()
        return result.get('messages', [])

    try:
        inbox_messages = fetch_by_label("INBOX")
        spam_messages = fetch_by_label("SPAM") # C≈©ng ki·ªÉm tra trong spam
        all_messages = (inbox_messages or []) + (spam_messages or [])

        for msg_ref in all_messages: # ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n
            msg_detail = service.users().messages().get(userId='me', id=msg_ref['id']).execute()
            payload = msg_detail.get('payload', {})
            headers = payload.get("headers", [])
            parts = payload.get('parts', [])
            body = ""

            if parts: # ∆Øu ti√™n l·∫•y HTML body
                for part in parts:
                    if part['mimeType'] == 'text/html' and 'data' in part['body']:
                        body = base64.urlsafe_b64decode(part['body']['data']).decode('utf-8', errors='ignore')
                        break
                if not body: # N·∫øu kh√¥ng c√≥ HTML, th·ª≠ l·∫•y text/plain
                     for part in parts:
                        if part['mimeType'] == 'text/plain' and 'data' in part['body']:
                            body = base64.urlsafe_b64decode(part['body']['data']).decode('utf-8', errors='ignore')
                            # C√≥ th·ªÉ c·∫ßn chuy·ªÉn ƒë·ªïi text/plain sang HTML n·∫øu mu·ªën hi·ªÉn th·ªã ƒë·∫πp h∆°n
                            body = body.replace("\n", "<br>") # Chuy·ªÉn ƒë·ªïi c∆° b·∫£n
                            break
            elif 'body' in payload and 'data' in payload['body']: # Fallback n·∫øu kh√¥ng c√≥ parts
                body_data = payload['body']['data']
                # Ki·ªÉm tra mimeType c·ªßa payload ch√≠nh n·∫øu kh√¥ng c√≥ parts
                mime_type = payload.get('mimeType', '')
                body = base64.urlsafe_b64decode(body_data).decode('utf-8', errors='ignore')
                if mime_type == 'text/plain':
                     body = body.replace("\n", "<br>")


            subject = next((h['value'] for h in headers if h['name'].lower() == 'subject'), '') # lower() ƒë·ªÉ kh·ªõp case-insensitive
            sender = next((h['value'] for h in headers if h['name'].lower() == 'from'), '')
            date = next((h['value'] for h in headers if h['name'].lower() == 'date'), '')

            mails.append({
                "id": msg_ref['id'],
                "subject": subject,
                "from": sender,
                "date": date,
                "body": body # Tr·∫£ v·ªÅ c·∫£ body
            })
        # S·∫Øp x·∫øp email theo ng√†y nh·∫≠n, m·ªõi nh·∫•t l√™n ƒë·∫ßu (c·∫ßn parse date)
        # T·∫°m th·ªùi kh√¥ng s·∫Øp x·∫øp ·ªü backend, ƒë·ªÉ frontend t·ª± x·ª≠ l√Ω n·∫øu c·∫ßn
        return jsonify(mails)

    except Exception as e:
        print(f"‚ùå Error fetching emails for {target_email}: {e}")
        # Tr·∫£ v·ªÅ l·ªói c·ª• th·ªÉ h∆°n cho client n·∫øu c√≥ th·ªÉ
        return jsonify({"error": f"L·ªói khi l·∫•y email: {str(e)}"}), 500


@app.route('/')
def serve_index():
    return render_template('index.html')

@app.route('/api/create', methods=['POST'])
def api_create_email():
    data = request.json or {}
    custom_username = data.get("username") # ƒê·ªïi t√™n bi·∫øn cho r√µ r√†ng
    if custom_username:
        # Validate custom_username: ch·ªâ cho ph√©p ch·ªØ c√°i, s·ªë, v√† m·ªôt s·ªë k√Ω t·ª± ƒë·∫∑c bi·ªát an to√†n
        if not re.match(r"^[a-zA-Z0-9._-]+$", custom_username):
            return jsonify({"error": "T√™n ng∆∞·ªùi d√πng t√πy ch·ªânh ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá."}), 400
        email = f"{custom_username.lower()}@quy.edu.pl"
    else:
        email = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8)) + "@quy.edu.pl"
    return jsonify({"email": email})

@app.route('/api/inbox', methods=['GET'])
# Kh√¥ng c√≤n @require_api_key
def api_list_emails():
    service = gmail_authenticate()
    if not service:
        return jsonify({"error": "L·ªói x√°c th·ª±c Gmail API"}), 503

    target_email = request.args.get('email', "").lower()
    if not target_email or '@' not in target_email:
        return jsonify({"error": "Thi·∫øu tham s·ªë email ho·∫∑c email kh√¥ng h·ª£p l·ªá"}), 400

    def fetch_by_label(label):
        query = f"to:{target_email}"
        result = service.users().messages().list(
            userId='me', q=query, labelIds=[label], maxResults=10 # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
        ).execute()
        return result.get('messages', [])

    try:
        inbox_msgs = fetch_by_label("INBOX")
        spam_msgs = fetch_by_label("SPAM")
        all_msgs_refs = (inbox_msgs or []) + (spam_msgs or [])

        mails = []
        for msg_ref in all_msgs_refs:
            detail = service.users().messages().get(userId='me', id=msg_ref['id']).execute()
            payload = detail.get("payload", {})
            headers = payload.get("headers", [])
            snippet = detail.get("snippet", "") # Gi·ªØ snippet cho danh s√°ch nhanh
            subject = next((h['value'] for h in headers if h['name'].lower() == 'subject'), '')
            sender = next((h['value'] for h in headers if h['name'].lower() == 'from'), '')
            date_str = next((h['value'] for h in headers if h['name'].lower() == 'date'), '')

            mails.append({
                "id": msg_ref['id'],
                "subject": subject,
                "from": sender,
                "date": date_str,
                "snippet": snippet # Snippet c√≥ th·ªÉ h·ªØu √≠ch cho hi·ªÉn th·ªã danh s√°ch
            })
        return jsonify({"emails": mails})
    except Exception as e:
        print(f"L·ªói khi l·∫•y danh s√°ch email qua API cho {target_email}: {e}")
        return jsonify({"error": f"L·ªói m√°y ch·ªß khi x·ª≠ l√Ω y√™u c·∫ßu: {str(e)}"}), 500

@app.route('/api/email/<msg_id>', methods=['GET'])
# Endpoint n√†y c≈©ng kh√¥ng c·∫ßn API key n·ªØa
def api_read_email(msg_id):
    service = gmail_authenticate()
    if not service:
        return jsonify({"error": "L·ªói x√°c th·ª±c Gmail API"}), 503

    # `email` query parameter kh√¥ng th·ª±c s·ª± c·∫ßn thi·∫øt n·∫øu msg_id l√† duy nh·∫•t to√†n c·ª•c
    # v√† kh√¥ng c√≥ ki·ªÉm tra quy·ªÅn s·ªü h·ªØu d·ª±a tr√™n email ·ªü ƒë√¢y.
    # Tuy nhi√™n, client hi·ªán t·∫°i g·ª≠i n√≥, n√™n ta c√≥ th·ªÉ gi·ªØ l·∫°i ho·∫∑c b·ªè qua.
    # target_email_param = request.args.get('email', '').lower()

    if not msg_id:
        return jsonify({"error": "Thi·∫øu ID tin nh·∫Øn"}), 400

    try:
        msg_detail = service.users().messages().get(userId='me', id=msg_id).execute()
        payload = msg_detail.get("payload", {})
        headers = payload.get("headers", [])
        parts = payload.get('parts', [])
        body = ""

        if parts:
            for part in parts:
                if part['mimeType'] == 'text/html' and 'data' in part['body']:
                    body = base64.urlsafe_b64decode(part['body']['data']).decode('utf-8', errors='ignore')
                    break
            if not body: # Fallback to text/plain if no HTML part
                for part in parts:
                    if part['mimeType'] == 'text/plain' and 'data' in part['body']:
                        body = base64.urlsafe_b64decode(part['body']['data']).decode('utf-8', errors='ignore')
                        # Chuy·ªÉn ƒë·ªïi c∆° b·∫£n text sang HTML cho hi·ªÉn th·ªã
                        body = body.replace("\n", "<br>").replace("\r\n", "<br>")
                        break
        elif 'body' in payload and 'data' in payload['body']: # No parts, check main body
            body_data = payload['body']['data']
            mime_type = payload.get('mimeType', '')
            body = base64.urlsafe_b64decode(body_data).decode('utf-8', errors='ignore')
            if mime_type == 'text/plain':
                body = body.replace("\n", "<br>").replace("\r\n", "<br>")


        subject = next((h['value'] for h in headers if h['name'].lower() == 'subject'), '')
        sender = next((h['value'] for h in headers if h['name'].lower() == 'from'), '')
        date_str = next((h['value'] for h in headers if h['name'].lower() == 'date'), '')

        return jsonify({
            "id": msg_id, # Tr·∫£ v·ªÅ c·∫£ ID
            "subject": subject,
            "from": sender,
            "date": date_str,
            "body": body
        })
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc chi ti·∫øt email {msg_id} qua API: {e}")
        # Ki·ªÉm tra xem l·ªói c√≥ ph·∫£i do kh√¥ng t√¨m th·∫•y email (404 t·ª´ Google) kh√¥ng
        if hasattr(e, 'resp') and e.resp.status == 404:
            return jsonify({"error": f"Kh√¥ng t√¨m th·∫•y email v·ªõi ID: {msg_id}"}), 404
        return jsonify({"error": f"L·ªói m√°y ch·ªß khi x·ª≠ l√Ω y√™u c·∫ßu: {str(e)}"}), 500

def init_db():
    conn = get_db()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            email TEXT PRIMARY KEY,
            password_hash TEXT NOT NULL,
            created TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """) # B·∫£ng api_keys ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè
    conn.commit()
    cur.close()
    conn.close()

init_db()

@app.route('/api/register', methods=['POST'])
def register():
    data = request.json
    email = data.get('email', '').lower().strip()
    password = data.get('password', '').strip()

    if not email or not password:
        return jsonify({"error": "Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc."}), 400
    if '@' not in email: # Ki·ªÉm tra email h·ª£p l·ªá c∆° b·∫£n
        return jsonify({"error": "ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá."}), 400
    if len(password) < 6: # Y√™u c·∫ßu m·∫≠t kh·∫©u t·ªëi thi·ªÉu
         return jsonify({"error": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±."}), 400


    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM users WHERE email=%s", (email,))
    if cur.fetchone():
        cur.close()
        conn.close()
        return jsonify({"error": "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i."}), 409 # 409 Conflict

    cur.execute("INSERT INTO users (email, password_hash) VALUES (%s, %s)",
                (email, generate_password_hash(password)))
    conn.commit()
    cur.close()
    conn.close()

    session['user'] = email # T·ª± ƒë·ªông ƒëƒÉng nh·∫≠p sau khi ƒëƒÉng k√Ω
    return jsonify({"message": "ƒêƒÉng k√Ω th√†nh c√¥ng.", "email": email}), 201


@app.route('/api/login', methods=['POST'])
def login():
    data = request.json
    email = data.get('email', '').lower().strip()
    password = data.get('password', '').strip()

    if not email or not password:
        return jsonify({"error": "Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc."}), 400

    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE email=%s", (email,))
    user = cur.fetchone()
    cur.close()
    conn.close()

    if not user or not check_password_hash(user['password_hash'], password):
        return jsonify({"error": "Sai email ho·∫∑c m·∫≠t kh·∫©u."}), 401

    session['user'] = email
    return jsonify({"message": "ƒêƒÉng nh·∫≠p th√†nh c√¥ng.", "email": email})


@app.route('/api/logout', methods=['POST'])
def logout():
    session.pop('user', None)
    return jsonify({"message": "ƒê√£ ƒëƒÉng xu·∫•t."})


@app.route('/api/me', methods=['GET'])
def get_current_user():
    if 'user' in session:
        return jsonify({"email": session['user']})
    return jsonify({"error": "Ch∆∞a ƒëƒÉng nh·∫≠p."}), 401


# ƒê√£ lo·∫°i b·ªè c√°c API endpoint li√™n quan ƒë·∫øn API Key:
# /api/create_api_key, /api/my_keys, /api/delete_key

@app.route('/congcu')
def change_package_page(): # ƒê·ªïi t√™n h√†m ƒë·ªÉ tr√°nh tr√πng v·ªõi t√™n route
    return render_template('congcu.html')

@app.route("/api/congcu", methods=["POST"])
def api_congcu_process(): # ƒê·ªïi t√™n h√†m
    data = request.json or {}
    original_link = data.get("link") # ƒê·ªïi t√™n bi·∫øn
    new_pkg = data.get("newPkg")
    new_code = data.get("newCode")

    if not original_link or not new_pkg or not new_code:
        return jsonify({"error": "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o."}), 400

    try:
        updated_link = update_link_parameters(original_link, new_pkg, new_code) # ƒê·ªïi t√™n h√†m
        return jsonify({"new_link": updated_link})
    except Exception as e:
        print(f"L·ªói trong /api/congcu: {e}")
        return jsonify({"error": f"L·ªói x·ª≠ l√Ω: {str(e)}"}), 500

def update_link_parameters(original_link, new_pkg, new_code): # ƒê·ªïi t√™n h√†m
    try:
        # S·ª≠ d·ª•ng urllib.parse ƒë·ªÉ x·ª≠ l√Ω URL m·ªôt c√°ch an to√†n h∆°n
        # Tuy nhi√™n, logic hi·ªán t·∫°i d·ª±a tr√™n thay th·∫ø chu·ªói ph·ª©c t·∫°p, c·∫ßn c·∫©n th·∫≠n
        decoded_link = urllib.parse.unquote(original_link)
        
        # Thay th·∫ø package
        # C·∫ßn ƒë·∫£m b·∫£o pattern n√†y ch√≠nh x√°c v√† kh√¥ng g√¢y ra l·ªói ngo√†i √Ω mu·ªën
        # V√≠ d·ª•: subs:com.google.android.apps.subscriptions.red:g1.OLD_PACKAGE_NAME"
        # new_m_string = f'g1.{new_pkg}'
        # updated_link_pkg = re.sub(r'g1\.[^"]+', new_m_string, decoded_link) # C√≥ th·ªÉ kh√¥ng ƒë·ªß an to√†n

        # Gi·ªØ l·∫°i logic regex g·ªëc n·∫øu n√≥ ƒë√£ ho·∫°t ƒë·ªông ƒë√∫ng
        matches = re.findall(r'subs:com\.google\.android\.apps\.subscriptions\.red:g1\.[^"]+', decoded_link)
        if not matches:
            # N·∫øu kh√¥ng t√¨m th·∫•y pattern package, c√≥ th·ªÉ tr·∫£ v·ªÅ link g·ªëc ho·∫∑c b√°o l·ªói
            # return original_link # Ho·∫∑c raise ValueError("Kh√¥ng t√¨m th·∫•y pattern package trong link.")
            pass # B·ªè qua n·∫øu kh√¥ng t√¨m th·∫•y, s·∫Ω c·ªë g·∫Øng thay th·∫ø code

        updated_link_processing = original_link # B·∫Øt ƒë·∫ßu l·∫°i t·ª´ link g·ªëc ƒë√£ quote
        for m_pattern in matches:
            new_m_replacement_unquoted = re.sub(r'g1\.[^"]+', f'g1.{new_pkg}', m_pattern)
            updated_link_processing = updated_link_processing.replace(
                urllib.parse.quote(m_pattern, safe='/:=?.&'), 
                urllib.parse.quote(new_m_replacement_unquoted, safe='/:=?.&'), 
                1
            )
        
        # Thay th·∫ø m√£ code
        # Pattern g·ªëc: r'%2C\d+%2C' -> t√¨m ki·∫øm m·ªôt s·ªë ƒë∆∞·ª£c bao b·ªüi %2C (d·∫•u ph·∫©y ƒë√£ m√£ h√≥a URL)
        # V√≠ d·ª•: ...%2COLD_CODE%2C...
        # Thay th·∫ø b·∫±ng: ...%2CNEW_CODE%2C...
        # count=1 ƒë·ªÉ ch·ªâ thay th·∫ø l·∫ßn xu·∫•t hi·ªán ƒë·∫ßu ti√™n
        final_updated_link = re.sub(r'%2C\d+%2C', f'%2C{new_code}%2C', updated_link_processing, count=1)
        return final_updated_link
        
    except Exception as ex:
        print("‚ùå update_link_parameters() l·ªói:", ex)
        raise # N√©m l·∫°i l·ªói ƒë·ªÉ endpoint /api/congcu c√≥ th·ªÉ b·∫Øt v√† tr·∫£ v·ªÅ l·ªói 500

# Static files (CSS, JS)
@app.route('/static/<path:filename>')
def serve_static(filename):
    return send_from_directory('static', filename)


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    # Ch·∫°y v·ªõi debug=False trong m√¥i tr∆∞·ªùng production
    app.run(host='0.0.0.0', port=port, debug=False)
